import asyncio
import json
from dotenv import load_dotenv
import os
import warnings
import logging
from mcp import ClientSession
from mcp.client.sse import sse_client
from litellm import experimental_mcp_client
#warnings and logging
warnings.filterwarnings("ignore")
from google import genai
logging.basicConfig(level=logging.ERROR)
load_dotenv()
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

async def categorize_email(email_body):
    """Categorizes email content using Gemini API."""
    client = genai.Client(api_key=GEMINI_API_KEY)
    async with sse_client("http://localhost:8000/mcp-server/sse/") as streams:
        async with ClientSession(*streams) as session:
            await session.initialize()
            mcp_tools = await experimental_mcp_client.load_mcp_tools(session=session, format="mcp")
            print(len(mcp_tools))
            if not mcp_tools:
                print("No MCP tools available.")
                return "unknown"
            response = client.models.generate_content(
                model="gemini-2.0-flash",
                contents=["summarize recent emails"],
                config={
                    "system_instruction": ["You are a Gmail agent. Your task is to use the available tools."],
                    "tools": mcp_tools
                },
            )
            print("making response")
            print(response)

            if response.candidates and response.candidates[0].content.parts:
                for part in response.candidates[0].content.parts:
                    if hasattr(part, 'function_call') and part.function_call is not None:
                        function_call = part.function_call
                        print(f"Function call: {function_call}")
                        result = await session.call_tool(
                            function_call.name, arguments=dict(function_call.args)
                        )
                        print(f"Result: {result.content}")
                        try:
                            email_data = json.loads(result.content[0].text)
                            return email_data
                        except json.JSONDecodeError:
                            print("MCP server returned non-JSON response:")
                            print(result.content[0].text)
                        except (IndexError, AttributeError):
                            print("Unexpected result structure from MCP server:")
                            print(result)
                    else:
                        print("No function call was generated by the model.")
                        if hasattr(response, 'text') and response.text:
                            print("Model response:")
                            print(response.text)
            else:
                print("No candidates or content parts in the response.")

            return "unknown"

async def main():
    await categorize_email("")

if __name__ == '__main__':
    asyncio.run(categorize_email(""))
